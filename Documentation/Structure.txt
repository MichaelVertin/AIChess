/////////////// basic description ///////////////////
Board: board where game is played
Piece: piece that moves on the board
Position: position on the board
Turn: what a piece does
Coor: coordinate on a board
Player: identifies and does turns


///////////////// attributes/methods /////////////////
Board:Monobehaviour
    pieces:List<Piece>
    positions:2DArray<Position>
    history:Stack<Turn>
    players:List<Player>
    playerTurn:PlayerID
    playerInControl:PlayerID
    state:BOARD_STATE
    IsFriend(Coor):bool
    IsEnemy(Coor):bool
    IsPiece(Coor):bool
    IsPosition(Coor):bool
    UpdatePhysical():void
    PassControl(Player):void

Piece:Monobehaviour
    board:Board
    coor:Coor
    owner:Player
    isActive:bool
    GetTurns():List<Turn>
    GetLegalTurns():List<Turn>
    UpdatePhysical():void

Turn
    startPos:Position
    endPos:Position
    pieceRemoved:Piece
    pieceCreated:Piece
    board:Board
    Do():void
    Undo():void
    Verify():bool
    DoIfVerified():bool

Position
    piece:Piece

Player:
    id:PlayerID
    OnTurnStart():void




///////////////// processing //////////////////
Board:
    IsFriend/IsEnemy/IsPiece:
        determines whether the coordinate contains a 
        friend piece, enemey piece, piece, or in the range
        (friend/enemy is determined by playerTurn)
    playerInControl:
        returns which player is in control of the pieces
    state:
        returns GAME_OVER,INVALID,IN_PROGRESS
    UpdatePhysical():
        updates physical position of all pieces
    PassControl():
        starts next players turn, 
        updates player in control

Piece:
    isActive:
        is this involved in gameplay, or removed from the board? 

    GetTurns():
        returns empty list if the owner is not active
        otherwise, returns a list of turns the piece can make, 
            not considering safety of king. 
    GetLegalTurns():
        returns a list of legal turns
    UpdatePhysical():
        updates position of the piece, 
        if the piece is not active, 
            the updated position is off of the board

Turn:
    start/endPos:
        Position of the piece being moved during the turn
    pieceRemoved/Created:
        reference to piece that was removed/created during the turn

    Do():
        moves the piece at startPos to endPos, 
        sets pieceRemoved to inactive if exists, 
        sets pieceCreated to active if exists, 
        adds this into board history, 
        sets playerTurn to the next player
    Undo():
        moves the piece at endPos to startPos, 
        sets pieceRemoved to active if exists, 
        destroys pieceCreated to inactive if exists, 
        removes this from board history, 
        sets playerTurn to the previous player
    Verify():
        does the turn, 
        checks the state of the board is valid, 
        undoes the turn
    DoIfVerified():
        does the turn, 
        if the state of the board is invalid, 
            undoes the turn, report failure
        otherwise, report success

Player:
    OnTurnStart():
        default moves a random piece



//////////////////// access //////////////////
   attribute         |    who will modify/call
================================================
Board.pieces         | Turn
Board.positions      | Player
Board.history        | Turn
Board.players        | 
Board.playerTurn     | Turn
Board.state          | 
Board.playerInControl| 
Piece.coor           | Turn
Piece.isActive       | Turn
Piece.owner          | 
Turn.start/endPos    | 
Turn.pieceRemoved    | 
Position.piece       | Turn, Board

Board.IsFriend       | Turn
Board.UpdatePhysical | Player
Board.PassControl    | Player
Piece.GetTurns       | Turn
Piece.GetLegalTurns  | Player, Turn
Piece.UpdatePhysical | Board
Turn.Do              | Player
Turn.Undo            | Player
Turn.Verify          | Player
Turn.DoIfVerified    | Player
Player.OnTurnStart   | Board


///////////////// rules of flow ///////////////////
Board.pieces
 - contains all pieces that exist on the board or in history, 
   each piece's isActive and position is updated with history
    - true before and after any Turn method
Board.playerTurn
 - playerTurn is the player after the last turn in history
    - true before and after any Turn method
Board.playerInControl
 - the player in control of piece movement (other players control pieces)
    - true before and after any Player method

All other attributes must be updated before any method call. 





