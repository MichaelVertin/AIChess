/////////////// basic description ///////////////////
Board: board where game is played
Piece: piece that moves on the board
Position: position on the board
Turn: what a piece does
Coor: coordinate on a board
Player: identifies and does turns


//////////////////////////////////// access ////////////////////////////////////
R: read data from object
W: change object
E: make object do something

                  | Board | Piece | Turn | Player |
Board.pieces      | R--   | R--   | RW-  | R--    |
Board.history     | ---   | ---   | RW-  | ---    |
Board.playerTurn  | ---   | R--   | -W-  | ---    |
Board.playerInC.. | ---   | ---   | ---  | RW-    |
Board.state       | RW-   | ---   | R--  | ---    |
Board.positions   | ---   | R--   | ---  | R--    |
Board.physical    | ---   | ---   | ---  | --E    |
Board.turns       | -W-   | ---   | ---  | R--    |
board.playerDoi.. | RW-   | ---   | ---  | RW-    |

Piece.physical    | --E   | RW-   | ---  | ---    |
Piece.turnCount   | ---   | ---   | -W-  | ---    |
Piece.coor        | R--   | ---   | RW-  | ---    |
Piece.turns       | ---   | -W-   | ---  | R--    |

Turn.*            | ---   | -W-   | --E  | --E    |

Player.*          | R-E   | R--   | ---  | ---    |


Board.pieces
   R: pieces, GetPiece(), GetFriend(), GetEnemy()
   W: Create(), AddPiece(), RemovePiece(), DestroyPiece()

Board.history
   R/W: history
   E: Turn.*

Board.playerTurn
   R: playerTurn
   W: NextPlayerTurn(), PrevPlayerTurn()
   E: PassControl()

Board.playerInControl
   R: playerInControl
   W: PassControl()

Board.state
   R: ValidState(), GameOver

Board.positions
   R: GetPosition(), IsEmpty()

Board.physical
   R: transform
   E: UpdatePhsyical()

Board.turns
   R: GetLegalTurns, GetTurns


Piece.physical
   E: UpdatePhysical()

Piece.turnCount
   R/W: turnCount

Piece.coor
   R/W: coor

Piece.turns
   R: GetTurns(), GetLegalTurns()


Turn.*
   R: Verify()
   W: AddPiece(), RemovePiece(), AddMovement()
   E: Do(), Undo(), DoIfVerified()


Player.*
   R/W: id, direction, promotionY, baseY
   E: OnControlStart()


////////////////// threading ////////////////////
PlayerDoingTurn needs to be set before the thread
    is initialized, and can't be reset before threading
    operations are performed
The board cannot be modified from outside the thread
    when PlayerDoingTurn is true

board.Update // Unity routine
 - if not PlayerDoingTurn
    - board.StartTurn

board.StartTurn // Unity routine
 - update the physical board
 - sets PlayerDoingTurn to true
 - creates a thread for next player's OnControlStart
 -   then runs the thread

board.PassControl // threaded
 - set PlayerDoingTurn to false

player.OnControlStart // threaded
 - player does turn (take as much time as needed)
 - board.PassControl




///////////////// descriptions //////////////////
Board:
    pieces:
     - list of all pieces active on the board
    history:
     - record of turns made
     - top turn was the last made
    playerTurn:
     - owner of pieces that can take their turn
    playerInControl:
     - player who controls turns
    state:
     - state of board
    positions:
     - locations on the board that contain up to one piece
    physical:
     - board and pieces seen by user
    turns:
     - possible turns for the player turn

Piece:
    physical:
     - piece seen by the user
    turnCount:
     - number of times the piece has been moved
        - undoing turn decreases this value
    coor:
     - coorinate of the piece on the board
    turns:
     - list of turns the piece can make

Turn:
    movements:
     - list of pieces and their departure/destination 
       coordinates when executed
    removed pieces:
     - list of pieces to be removed when executed
    added pieces:
     - list of pieces to be created when executed
    
Player:
    id: unique id for each player (starts at 0)
    direction: direction that a pawn would move
    promotionY: y coordinate when pawns can be promoted
    baseY: y coordinate where pieces are created



